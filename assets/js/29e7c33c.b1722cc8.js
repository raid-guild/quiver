"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[327],{457:function(e){e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":0,"name":"@raidguild/quiver","kind":1,"kindString":"Project","flags":{},"originalName":"","children":[{"id":1,"name":"NetworkConfig","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":47,"character":12}],"type":{"type":"reflection","declaration":{"id":2,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":47,"character":28}],"indexSignature":{"id":3,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":4,"name":"chainId","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reflection","declaration":{"id":5,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":6,"name":"chainId","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":49,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":9,"name":"explorer","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":52,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":7,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":50,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":10,"name":"rpc","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":53,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":8,"name":"symbol","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":51,"character":4}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[6,9,7,10,8]}],"sources":[{"fileName":"WalletContext.tsx","line":48,"character":21}]}}}}},"permalink":"/quiver/api#NetworkConfig","previousId":60,"nextId":110},{"id":110,"name":"ERC165_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"An ABI definition for ERC165."},"sources":[{"fileName":"abi.ts","line":20,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/quiver/api#ERC165_ABI","previousId":1,"nextId":109},{"id":109,"name":"ERC20_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"A minimal ABI definition for an ERC20 token."},"sources":[{"fileName":"abi.ts","line":5,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/quiver/api#ERC20_ABI","previousId":110,"nextId":114},{"id":114,"name":"ERC721_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"An ABI definition for an ERC721 (non-fungible) token.\\nThis ABI includes common extensions for metadata, and enumerability."},"sources":[{"fileName":"abi.ts","line":68,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/quiver/api#ERC721_ABI","previousId":109,"nextId":111},{"id":111,"name":"ERC721_BASE_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"A minimal ABI definition for an ERC721 (non-fungible) token."},"sources":[{"fileName":"abi.ts","line":28,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/quiver/api#ERC721_BASE_ABI","previousId":114,"nextId":113},{"id":113,"name":"ERC721_ENUMERABLE_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"An ABI definition for enumerability of ERC721 tokens."},"sources":[{"fileName":"abi.ts","line":57,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/quiver/api#ERC721_ENUMERABLE_ABI","previousId":111,"nextId":112},{"id":112,"name":"ERC721_METADATA_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{},"sources":[{"fileName":"abi.ts","line":47,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/quiver/api#ERC721_METADATA_ABI","previousId":113,"nextId":11},{"id":11,"name":"WalletProvider","kind":32,"kindString":"Variable","flags":{},"comment":{},"sources":[{"fileName":"WalletContext.tsx","line":64,"character":13}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":12,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":15,"name":"defaultNetwork","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":67,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":14,"name":"networks","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":66,"character":2}],"type":{"type":"reference","id":1,"name":"NetworkConfig"}},{"id":13,"name":"web3modalOptions","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"WalletContext.tsx","line":65,"character":2}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ICoreOptions"}],"name":"Partial"}}],"groups":[{"title":"Properties","kind":1024,"children":[15,14,13]}],"sources":[{"fileName":"WalletContext.tsx","line":64,"character":38}]}}],"name":"React.FC"},"defaultValue":"...","permalink":"/quiver/api#WalletProvider","previousId":112},{"id":21,"name":"formatAddress","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"helpers.ts","line":15,"character":13}],"signatures":[{"id":22,"name":"formatAddress","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Given an address, format and truncate the address from middle."},"parameters":[{"id":23,"name":"address","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":24,"name":"ensName","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":25,"name":"chars","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"},"defaultValue":"5"}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/quiver/api/function/formatAddress","nextId":26},{"id":26,"name":"formatNumber","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"helpers.ts","line":32,"character":13}],"signatures":[{"id":27,"name":"formatNumber","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts a number to the localaized string representation."},"parameters":[{"id":28,"name":"number","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/quiver/api/function/formatNumber","previousId":21,"nextId":29},{"id":29,"name":"formatToUSD","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"helpers.ts","line":43,"character":13}],"signatures":[{"id":30,"name":"formatToUSD","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a localized string representation of a BigNumber multiplied by a currency unit"},"parameters":[{"id":31,"name":"usdPrice","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":32,"name":"number","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","name":"BigNumber"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/quiver/api/function/formatToUSD","previousId":26,"nextId":33},{"id":33,"name":"formatToken","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"helpers.ts","line":52,"character":13}],"signatures":[{"id":34,"name":"formatToken","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Formats a Bignumber to a string and displays 6 decimal places."},"parameters":[{"id":35,"name":"number","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"BigNumber"}]}},{"id":36,"name":"decimals","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]},"defaultValue":"18"}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}}],"permalink":"/quiver/api/function/formatToken","previousId":29,"nextId":18},{"id":18,"name":"parseTokenURI","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"helpers.ts","line":8,"character":13}],"signatures":[{"id":19,"name":"parseTokenURI","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts an ipfs:// link to an HTTP IPFS url https://ipfs.io/ipfs/<hash>"},"parameters":[{"id":20,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/quiver/api/function/parseTokenURI","previousId":33,"nextId":37},{"id":37,"name":"parseTxErrorMessage","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"helpers.ts","line":72,"character":13}],"signatures":[{"id":38,"name":"parseTxErrorMessage","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parses the errors returned from RPC calls and returns the error message string. Useful to display it in toast messages."},"parameters":[{"id":39,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"any"}}],"permalink":"/quiver/api/function/parseTxErrorMessage","previousId":18,"nextId":100},{"id":100,"name":"useCGPrice","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"hooks/useCGPrice.tsx","line":8,"character":13}],"signatures":[{"id":101,"name":"useCGPrice","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the currency value of a token from coin gecko"},"parameters":[{"id":102,"name":"__namedParameters","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reflection","declaration":{"id":103,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":104,"name":"tokenId","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useCGPrice.tsx","line":12,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":105,"name":"vsCurrency","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useCGPrice.tsx","line":13,"character":2}],"type":{"type":"literal","value":"usd"}}],"groups":[{"title":"Properties","kind":1024,"children":[104,105]}]}}}],"type":{"type":"reflection","declaration":{"id":106,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":108,"name":"loading","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useCGPrice.tsx","line":14,"character":21}],"type":{"type":"intrinsic","name":"boolean"}},{"id":107,"name":"price","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useCGPrice.tsx","line":14,"character":6}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[108,107]}]}}}],"permalink":"/quiver/api/function/useCGPrice","previousId":37,"nextId":89},{"id":89,"name":"useContract","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"hooks/useContract.tsx","line":9,"character":13}],"signatures":[{"id":90,"name":"useContract","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns an ethers contract instance which can be used with other hooks as well as directly calling functions on the contract."},"typeParameter":[{"id":91,"name":"TContract","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":91,"name":"TContract"}],"name":"ContractInstance"},"default":{"type":"intrinsic","name":"any"}}],"parameters":[{"id":92,"name":"address","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":93,"name":"typechainFactoryOrABI","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","id":91,"name":"TContract"}],"name":"ContractFactory"},{"type":"reference","name":"ContractInterface"}]}},{"id":94,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":95,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":96,"name":"useStaticProvider","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useContract.tsx","line":13,"character":4}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[96]}]}}}],"type":{"type":"reflection","declaration":{"id":97,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":98,"name":"contract","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useContract.tsx","line":16,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Contract"},{"type":"reference","id":91,"name":"TContract"}]}},{"id":99,"name":"error","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useContract.tsx","line":17,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[98,99]}]}}}],"permalink":"/quiver/api/function/useContract","previousId":100,"nextId":40},{"id":40,"name":"useReadContract","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"hooks/useReadContract.tsx","line":9,"character":13}],"signatures":[{"id":41,"name":"useReadContract","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Read from contract"},"typeParameter":[{"id":42,"name":"TContract","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":42,"name":"TContract"}],"name":"ContractInstance"},"default":{"type":"intrinsic","name":"any"}},{"id":43,"name":"TFunctionName","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":44,"name":"contract","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":42,"name":"TContract"},{"type":"reference","name":"Contract"}]}},{"id":45,"name":"functionName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":43,"name":"TFunctionName"}},{"id":46,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":47,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":48,"name":"autoUpdateInterval","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useReadContract.tsx","line":16,"character":4}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[48]}]}}},{"id":49,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","id":43,"name":"TFunctionName"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","id":42,"name":"TContract"}],"name":"ContractFunctions"}}],"name":"Parameters"}}],"type":{"type":"reflection","declaration":{"id":50,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":52,"name":"error","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":21,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}},{"id":51,"name":"loading","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":20,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":53,"name":"response","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":22,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","id":43,"name":"TFunctionName"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","id":42,"name":"TContract"}],"name":"ContractFunctions"}}],"name":"ReturnType"}],"name":"Awaited"}]}},{"id":54,"name":"mutate","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":24,"character":2}],"signatures":[{"id":55,"name":"mutate","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reflection","declaration":{"id":56,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":58,"name":"error","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":27,"character":8}],"type":{"type":"reference","name":"Error"}},{"id":57,"name":"loading","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":26,"character":8}],"type":{"type":"intrinsic","name":"boolean"}},{"id":59,"name":"response","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useReadContract.tsx","line":28,"character":8}],"type":{"type":"intrinsic","name":"any"}}],"groups":[{"title":"Properties","kind":1024,"children":[58,57,59]}]}}]}],"name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[52,51,53]},{"title":"Methods","kind":2048,"children":[54]}]}}}],"permalink":"/quiver/api/function/useReadContract","previousId":89,"nextId":84},{"id":84,"name":"useTokenBalance","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"hooks/useTokenBalance.tsx","line":17,"character":16}],"signatures":[{"id":85,"name":"useTokenBalance","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the current token balance for a specified address, or the currently-connected wallet.\\nThis should be used on ERC20 or ERC721 contracts that implement the `balanceOf(address)` function.\\nThis hook will suspend while it loads."},"parameters":[{"id":86,"name":"contract","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The smart contract for the token. Should be an ERC20 or ERC721 contract."},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Contract"}]}},{"id":87,"name":"address","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The address. Defaults to the address of the connected wallet."},"type":{"type":"intrinsic","name":"string"}},{"id":88,"name":"autoUpdateInterval","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The interval in milliseconds to automatically update the balance."},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"BigNumber"}}],"permalink":"/quiver/api/function/useTokenBalance","previousId":40,"nextId":16},{"id":16,"name":"useWallet","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"WalletContext.tsx","line":190,"character":13}],"signatures":[{"id":17,"name":"useWallet","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the wallet context from the wallet provider"},"type":{"type":"reference","name":"WalletContextType"}}],"permalink":"/quiver/api/function/useWallet","previousId":84,"nextId":60},{"id":60,"name":"useWriteContract","kind":64,"kindString":"Function","flags":{"isConst":true},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":15,"character":13}],"signatures":[{"id":61,"name":"useWriteContract","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Write to a contract"},"typeParameter":[{"id":62,"name":"TContract","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":62,"name":"TContract"}],"name":"ContractInstance"},"default":{"type":"intrinsic","name":"any"}},{"id":63,"name":"TFunctionName","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":64,"name":"contract","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Contract"},{"type":"reference","id":62,"name":"TContract"}]}},{"id":65,"name":"functionName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":63,"name":"TFunctionName"}},{"id":66,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":67,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":68,"name":"confirmations","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":22,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":75,"name":"onConfirmation","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":25,"character":4}],"signatures":[{"id":76,"name":"onConfirmation","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":77,"name":"receipt","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ContractReceipt"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":69,"name":"onError","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":23,"character":4}],"signatures":[{"id":70,"name":"onError","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":71,"name":"error","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"Error"}}],"type":{"type":"intrinsic","name":"void"}}]},{"id":72,"name":"onResponse","kind":2048,"kindString":"Method","flags":{"isOptional":true},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":24,"character":4}],"signatures":[{"id":73,"name":"onResponse","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":74,"name":"response","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ContractTransaction"}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[68]},{"title":"Methods","kind":2048,"children":[75,69,72]}]}}}],"type":{"type":"reflection","declaration":{"id":78,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":82,"name":"error","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":31,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}},{"id":83,"name":"response","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":32,"character":2}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","name":"ContractTransaction"}]}},{"id":79,"name":"mutate","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"hooks/useWriteContract.tsx","line":28,"character":2}],"signatures":[{"id":80,"name":"mutate","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":81,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","id":63,"name":"TFunctionName"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","id":62,"name":"TContract"}],"name":"ContractFunctions"}}],"name":"Parameters"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[82,83]},{"title":"Methods","kind":2048,"children":[79]}]}}}],"permalink":"/quiver/api/function/useWriteContract","previousId":16,"nextId":1}],"groups":[{"title":"Functions","kind":64,"children":[21,26,29,33,18,37,100,89,40,84,16,60],"categories":[{"title":"Helpers","children":[21,26,29,33,18,37]},{"title":"Hooks","children":[100,89,40,84,16,60]}]},{"title":"Type aliases","kind":4194304,"children":[1]},{"title":"Variables","kind":32,"children":[110,109,114,111,113,112,11],"categories":[{"title":"Common ABIs","children":[110,109,114,111,113,112]},{"title":"Providers","children":[11]}]}],"sources":[{"fileName":"index.ts","line":1,"character":0}],"permalink":"/quiver/api"},"urlSlug":"."}],"packageName":"@raidguild/quiver","packageVersion":"0.2.0"}]')}}]);